package Lesson2.primitive.data.types;

public class PrimitiveDataTypes {

    public static void main (String[] args){
        //Типы данных бываю: простые и ссылочные.
        //Всего 8 простых типов данных, которые делятся на 3 группы:
        //1. Численные (numeric):
          //1.1. Целые числа (integers):
                 // byte     [-128;127] 8 бит
                 // short    [-32768;32767] 16 бит
                 // int      [-2147483648;2147483647] 32 бит
                 // long     [-9223372036854775808;9223372036854775807] 64 бит
          //1.2. Дробные числа (floating-point):
                 // float    [3.4e-38;3.4e+38] 32 бит
                 // double   [1.7e-308;1.7e+308] 64 бит
        //2. Симольный (character):
                 // char     [0;65535] 16 бит
        //3. Логический (logical):
                 // boolean  {true;false} строго не определён

        byte b1 = 10;
        byte b2 = 20;
        byte b3 = 100;

        short s1 = 5;
        short s2 = -10;
        short s3 = 0;

        int i1 = 500;

        long l1 = 1000;
        long l2 = 10000000000L; // для данного типа данных нужно на конце использовать L'
        long l3 = 51l; // лучше не использовать строчную 'l', поскольку похожа на 1

        float f1 = 3.14F;
        float f2 = 2.5f;
        float f3 = 20; // нет проблем, поскольку java интерпретирует как int, а int входит в float

        double d1 = 5.5;
        double d2 = 87.65;

        // char имеет 3 типа записи

        // 1 тип записи:
        char c1 = 'a'; // символ должен быть один (нельзя 'ab') и заключен в одинарные кавычки
        char c2 = 'Ъ';
        char c3 = '7';
        char c4 = ' '; // пробел - это тоже символ, 2 пробела = 2 символа

        // 2 тип записи
        char c5 = 300; // без кавычек: означает, что переменная будет содержать значение 300-ого символа в Unicode

        // 3 тип записи
        char c6 = '\u03AB'; // также используется порядковый номер символа в Unicode
        //разница между c5 и c6 в том, что в первом используется 10-ая система счисления, во втором - 16-ая
        //16-ричная система счисления - помимо чисел от 0 до 9, испольузюся ABCDEF

        boolean bool1 = true;
        boolean bool2 = false;

        //Системы счислений:
        // 2-ичная   {0,1}
        // 8-ричная  {0-7}
        // 10-ричная {0-9}
        // 16-ричная {0-F}

        int a1 = 60;
        int a2 = 0B111100; // '0B' говорит о том, что число после является числом из 2-ичной системы счислений
        int a3 = 0b111100; // можно также использовать '0b'
        int a4 = 074; // '0' говорит о том, что число после является число из 8-ричной системы счислений
        int a5 = 0x3C; // '0x' говорит о том, что число после является число из 16-ричной системы счислений
        // хоть и 16-ричная система называется hexadecimal, начинается с 'h', почему-то решили использовать 'x'
        int a6 = 0X3C; // можно также использовать '0X', а также и 'c', но 'C' выглядит красивее

        // символ UNDERSCORE (подчеркивание) используется для удобства
        // нужен для того, чтобы при выводе больших числе не считать курсором кол-во чисел
        // Правила использования:
        // 1. НЕЛЬЗЯ использовать в начале и конце числа
        // 2. НЕЛЬЗЯ использовать до и после точки в дробных числах
        // 3. НЕЛЬЗЯ использовать до и после букв 'L', 'l' (тип long)
                               // до и после букв 'D', 'd' (тип double)
                               // до и после букв 'F', 'f' (тип float)
        // 4. НЕЛЬЗЯ использовать до, после и между символами '0x', '0X' (16-ричная сис-ма счисления)
                               // до, после и между символами '0B', '0b' (2-ичная сис-ма счисления)
        // 5. МОЖНО использовать после '0', который указывает, что число находится в 8-ричном формате

        int a7 = 1_000_000;
        int a8 = 1_000_00_0_______0_0; // можно делить как угодно, сис-ма не будет выводить сам '_'

        System.out.println(a8);
    }
}
